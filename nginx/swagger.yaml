openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:5000
    description: 本地开发服务器
tags:
  - name: auth
    description: ''
  - name: datasets
    description: ''
  - name: models
    description: ''
  - name: stars
    description: ''

paths:
  /api/v1/auth/register:
    post:
      tags:
        - auth
      summary: 用户注册接口
      description: 用户可以选择通过手机号或邮箱进行注册，用户名由系统自动生成并保证唯一性
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login_type:
                  type: string
                  description: 用户注册方式，选择 "email" 或 "telephone"
                  example: "telephone"
                login_identifier:
                  type: string
                  description: 电话或邮箱信息
                  example: "13345678906"
                username:
                  type: string
                  description: 用户名(昵称)
                  example: "test004"
                password:
                  type: string
                  description: 用户密码，密码长度应为8-20字符，包含至少一个大写字母、一个小写字母、一个数字和一个特殊字符。
                  example: "Www1111@"
                code:
                  type: string
                  description: 注册时的验证码，手机号或邮箱发送的验证码。
                  example: "123456"

      responses:
        '400':
          description: Invalid input, missing fields or incorrect format
        '422':
          description: Validation failed, invalid input format
        '409':
          description: Username, email or telephone already registered
        '500':
          description: Internal server error

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: 用户登录
      description: 登录并获取 JWT 令牌
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'  # 引用定义的 LoginRequest 组件
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  "message":
                    type: string
                    enum:
                      - "Login successful"
                  refresh_token:
                    type: string
        '400':
          description: Invalid input, missing fields or incorrect format
        '401':
          description: Authentication failed, invalid credentials
        '422':
          description: Validation failed, invalid login identifier format

  /api/v1/auth/logout:
    post:
      tags:
        - auth
      summary: 用户登出
      description: Log out and invalidate the JWT token
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Unauthorized, Invalid token
      security:
        - BearerAuth: [ ]  # 需要 Bearer Token 进行认证

  /api/v1/auth/protected:
    get:
      tags:
        - auth
      summary: Protected route
      description: Requires a valid JWT token
      responses:
        '200':
          description: Protected data returned
      security:
        - BearerAuth: [ ]

  /api/v1/auth/refresh_token:
    post:
      tags:
        - auth
      summary: 使用refresh token来刷新access token
      description: Get a new access token
      responses:
        '200':
          description: Token refreshed successfully
        '400':
          description: Invalid token
      security:
        - BearerAuth: [ ]

  /api/v1/auth/generate_code:
    post:
      tags:
        - auth
      summary: 获取验证码
      description: Get a
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login_type:
                  type: string
                  description: 用户注册方式，选择 "email" 或 "telephone"
                  example: "telephone"
                login_identifier:
                  type: string
                  description: 电话或邮箱信息
                  example: "13345678906"
      responses:
        '200':
          description: Token refreshed successfully
        '400':
          description: Invalid token
      security:
        - BearerAuth: [ ]

  /api/v1/datasets:
    get:
      tags:
        - datasets
      summary: 获取所有数据集/搜索数据集
      description: 查询数据集，支持模糊查询和过滤条件。
      parameters:
        - name: name
          in: query
          description: 数据集名称
          schema:
            type: string
        - name: description
          in: query
          description: 数据集描述
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: 按类型筛选，多个标签可以用逗号、分号或空格分隔
          required: false
          schema:
            type: string
        - name: size_min
          in: query
          description: 最小大小筛选
          required: false
          schema:
            type: string
        - name: size_max
          in: query
          description: 最大大小筛选
          required: false
          schema:
            type: string
        - name: sort_by
          in: query
          description: 排序字段，支持的字段包括：stars、size、downloads、likes等
          required: false
          schema:
            type: string
            enum: [ stars, size, downloads, likes ]
        - name: sort_order
          in: query
          description: 排序顺序，选择升序（asc）或降序（desc）
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
        - name: page
          in: query
          description: 当前页码
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: 每页显示的条数
          required: false
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: 成功返回数据集列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'  # 引用Dataset schema
                  total_count:
                    type: integer
                    description: 数据集总数量
                    example: 5
                  page:
                    type: integer
                    description: 当前页码
                    example: 1
                  per_page:
                    type: integer
                    description: 每页返回的数量
                    example: 5
                  total_pages:
                    type: integer
                    description: 总页数
                    example: 2
        '400':
          description: 请求无效

    post:
      summary: 创建新数据集
      operationId: createDataset
      tags:
        - datasets
      requestBody:
        description: Data for the new dataset.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the dataset.
                  example: "雄穗面积计算测试集"
                path:
                  type: string
                  description: The path to the dataset files.
                  example: "segmentation-tassel/dataset/test"
                size:
                  type: integer
                  description: The size of the dataset in bytes.
                  example: "24.9MB"
                description:
                  type: string
                  description: A brief description of the dataset.
                  example: "用来测试雄穗面积计算模型"
                type:
                  type: string
                  description: The type of the dataset.
                  example: "玉米；面积"
      responses:
        '201':
          description: Dataset successfully created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Dataset'
        '400':
          description: Invalid input data
        '500':
          description: Internal server error

  /api/v1/datasets/{dataset_id}:
    get:
      tags:
        - datasets
      summary: 获取单个数据集详情
      description: 返回系统中单个数据集的详细数据，包括模型 ID、名称、描述等信息。
      operationId: getDatasetById
      parameters:
        - name: dataset_id
          in: path
          required: true
          description: The unique ID of the dataset to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: 模型列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        '404':
          description: No datasets found in the database

    put:
      summary: 更新现有数据集
      operationId: updateDataset
      tags:
        - datasets
      parameters:
        - in: path
          name: dataset_id
          required: true
          description: The ID of the dataset to update.
          schema:
            type: integer
            example: 1
      requestBody:
        description: The updated data for the dataset.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the dataset.
                  example: "基于近地面图像的叶龄识别测试集"
                path:
                  type: string
                  description: The new path to the dataset files.
                  example: "detetcion-seed-leaf/dataset/test/uav"
                size:
                  type: string
                  description: The new size of the dataset in bytes.
                  example: "7.5MB"
                description:
                  type: string
                  description: A new description of the dataset.
                  example: "用来测试基于无人机图像的株数识别模型"
                type:
                  type: string
                  description: The type of the dataset.
                  example: "玉米；无人机；数量"
      responses:
        '200':
          description: Dataset successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: Invalid input data
        '404':
          description: Dataset not found
        '500':
          description: Internal server error

    delete:
      summary: 删除单个数据集
      operationId: deleteDataset
      tags:
        - datasets
      parameters:
        - in: path
          name: dataset_id
          required: true
          description: The ID of the dataset to delete.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Dataset successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dataset deleted successfully"
        '404':
          description: Dataset not found
        '500':
          description: Internal server error

  /api/v1/models/{model_id}/run:
    get:
      tags:
        - models
      summary: 运行模型并返回准确率
      description: 使用指定的模型 ID 和数据集 ID 运行模型，并返回训练准确率。
      parameters:
        - in: path
          name: model_id
          description: 要运行的模型 ID
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: dataset_id
          description: 要使用的数据集 ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 模型的训练准确率
          content:
            application/json:
              schema:
                type: object
                properties:
                  model_id:
                    type: integer
                    example: 1
                  dataset_id:
                    type: integer
                    example: 4
                  accuracy:
                    type: number
                    format: float
                    example: 0.92

        '400':
          description: Model ID and Dataset ID are required
        '404':
          description: Model ID or Dataset ID not found

  /api/v1/models/{model_id}/test-model:
    post:
      tags:
        - models
      summary: 测试模型并返回处理后的图片
      description: 上传图片并进行处理，返回处理后的图片和相应的模型输出 JSON 数据。
      parameters:
        - name: model_id
          in: path
          description: The ID of the model to execute
          required: true
          schema:
            type: integer

      requestBody:
        description: The file to be processed by the model
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 要处理的图片文件

      responses:
        '200':
          description: 处理后的图片。响应头包含模型输出信息。
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                description: 处理后的图像文件
          headers:
            X-Model-Output:
              description: 模型输出信息，包含 model_id, accuracy, 和 description。
              schema:
                type: object
                properties:
                  model_id:
                    type: integer
                    example: 1
                  accuracy:
                    type: number
                    format: float
                    example: 92.5
                  description:
                    type: string
                    example: "Model 1 processed the image successfully."

        '400':
          description: 没有上传文件
        '500':
          description: 服务器内部错误

  /api/v1/models:
    get:
      tags:
        - models
      summary: 获取所有模型/搜索模型数据
      description: 根据模型名称、输入类型、是否支持 CUDA 等条件来搜索模型，并支持分页查询。
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: 模型名称
        - in: query
          name: description
          schema:
            type: string
          description: 模型描述
        - in: query
          name: input
          schema:
            type: string
            enum:
              - jpg
              - jpeg
              - png
          description: 图片的输入类型（例如 'JPG', 'PNG'）
        - in: query
          name: cuda
          schema:
            type: boolean
          description: 模型是否支持 CUDA 加速
        - in: query
          name: sort_by
          schema:
            type: string
            enum:
              - accuracy
              - sales
              - stars
              - likes
          description: 排序字段
        - in: query
          name: sort_order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: 排序顺序（升序或降序）
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: 当前页码
        - in: query
          name: per_page
          schema:
            type: integer
            default: 5
          description: 每页显示的结果数
      responses:
        '200':
          description: 搜索结果列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'  # 引用Dataset schema
                  total_count:
                    type: integer
                    description: 模型总数量
                    example: 5
                  page:
                    type: integer
                    description: 当前页码
                    example: 1
                  per_page:
                    type: integer
                    description: 每页返回的数量
                    example: 5
                  total_pages:
                    type: integer
                    description: 总页数
                    example: 2
        '400':
          description: 查询参数无效

    post:
      tags:
        - models
      summary: 创建新模型
      description: 根据提供的模型信息创建一个新模型。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: '基于近地面图像的株数识别模型'
                description:
                  type: string
                  example: '通过数量除以面积可以计算密度'
                image:
                  type: string
                  example: 'detetcion-seed-leaf'
                input:
                  type: string
                  example: '*.JPG'
                cuda:
                  type: boolean
                  example: false
                instruction:
                  type: string
                  example: '-m ngp'
                output:
                  type: string
                  example: 'plant_detection_summary.csv'
                accuracy:
                  type: number
                  format: float
                  example: 0.98
                type:
                  type: string
                  example: '玉米；近地面；数量'

      responses:
        '201':
          description: 模型成功创建
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          description: 请求数据无效
        '500':
          description: Internal server error

  /api/v1/models/{model_id}:
    get:
      tags:
        - models
      summary: 获取单个模型详情
      description: 返回系统中单个模型的详细数据，包括模型 ID、名称、描述等信息。
      operationId: getModelById
      parameters:
        - name: model_id
          in: path
          required: true
          description: The unique ID of the model to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: 模型列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
        '404':
          description: No datasets found in the database

    put:
      tags:
        - models
      summary: 更新现有模型
      description: 更新给定 ID 的模型信息。
      parameters:
        - name: model_id
          in: path
          required: true
          description: 要更新的模型的 ID
          schema:
            type: integer
      requestBody:
        description: The updated data for the model.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: '基于近地面图像的株数识别模型'
                description:
                  type: string
                  example: '通过数量除以面积可以计算密度'
                image:
                  type: string
                  example: 'detetcion-seed-leaf'
                input:
                  type: string
                  example: '*.JPG'
                cuda:
                  type: boolean
                  example: false
                instruction:
                  type: string
                  example: '-m ngp'
                output:
                  type: string
                  example: 'plant_detection_summary.csv'
                accuracy:
                  type: number
                  format: float
                  example: 0.98
                type:
                  type: string
                  example: '玉米；近地面；数量'
      responses:
        '200':
          description: 模型成功更新
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          description: 请求数据无效
        '404':
          description: 模型未找到
        '500':
          description: Internal server error

    delete:
      tags:
        - models
      summary: 删除现有模型
      description: 根据给定的模型 ID 删除模型。
      parameters:
        - name: model_id
          in: path
          required: true
          description: 要删除的模型的 ID
          schema:
            type: integer
      responses:
        '200':
          description: 模型成功删除
        '404':
          description: 模型未找到
        '500':
          description: Internal server error

  /api/v1/stars/{target_id}/{star_type}:
    post:
      tags:
        - stars
      summary: 增加收藏
      description: 根据当前用户及收藏的数据type和id来增加收藏
      operationId: createStar
      parameters:
        - name: target_id
          in: path
          required: true
          description: 要增加收藏的数据id
          schema:
            type: integer
            format: int64
        - name: star_type
          in: path
          required: true
          description: 要增加收藏的数据type
          schema:
            type: string
            enum: [model, dataset]
      responses:
        '200':
          description: 增加成功
        '404':
          description: 数据异常
        '500':
          description: Internal server error
      security:
        - BearerAuth: []  # 需要 Bearer Token 进行认证

    delete:
      tags:
        - stars
      summary: 取消收藏
      description: 根据当前用户及收藏的数据type和id来取消收藏
      operationId: deleteStar
      parameters:
        - name: target_id
          in: path
          required: true
          description: 要取消收藏的数据id
          schema:
            type: integer
            format: int64
        - name: star_type
          in: path
          required: true
          description: 要取消收藏的数据type
          schema:
            type: string
            enum: [ model, dataset ]
      responses:
        '200':
          description: 取消成功
        '404':
          description: 数据异常
        '500':
          description: Internal server error
      security:
        - BearerAuth: [ ]  # 需要 Bearer Token 进行认证



components:
  schemas:
    AuthRegister:
      type: object
      required:
        - password
      properties:
        username:
          type: string
          description: 用户名
          example: "john_doe"
        password:
          type: string
          description: 用户密码
          example: "password123"
        email:
          type: string
          description: 用户邮箱
          example: "john.doe@example.com"
        telephone:
          type: string
          description: 用户电话号码
          example: "13345678906"
      description: >
        请提供电子邮件 (email) 或电话号码 (telephone)
        

    AuthLogin:
      type: object
      properties:
        login_identifier:
          type: string
          description: 用户的邮箱或电话号码具体信息
          example: 13345678901
        login_type:
          type: string
          description: 登录类型（选择：邮箱或电话号码）
          example: telephone
          enum:
            - email
            - telephone  # 提供选择框
        password:
          type: string
          description: 用户的密码
          example: 123123
      required:
        - login_identifier
        - login_type
        - password
      xml:
        name: auth

    Dataset:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "雄穗数量识别测试集"
        description:
          type: string
          example: "用来测试雄穗数量识别模型"
        type:
          type: string
          example: "玉米;数量"
        path:
          type: string
          example: "detetcion-tassel/dataset/test"
        size:
          type: string
          example: "2.39GB"
        downloads:
          type: integer
          format: int32
          example: 1
        stars:
          type: integer
          format: int32
          example: 2
        likes:
          type: integer
          format: int32
          example: 3
      required:
        - name

    Model:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: '基于近地面图像的株数识别模型'
        description:
          type: string
          example: '通过数量除以面积可以计算密度'
        image:
          type: string
          example: 'detetcion-seed-leaf'
        input:
          type: string
          example: '*.JPG'
        cuda:
          type: boolean
          example: false
        instruction:
          type: string
          example: '-m ngp'
        output:
          type: string
          example: 'plant_detection_summary.csv'
        accuracy:
          type: number
          format: float
          example: 0.98
        type:
          type: string
          example: '玉米；近地面；数量'
        sales:
          type: integer
          format: int32
          example: 0
        stars:
          type: integer
          format: int32
          example: 0
        likes:
          type: integer
          format: int32
          example: 0
      required:
        - name


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
